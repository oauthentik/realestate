{"version":3,"file":"ngx-lazy-loading-images.js.map","sources":["ng://ngx-lazy-loading-images/lib/ngx-lazy-loading-images.service.ts","ng://ngx-lazy-loading-images/lib/ngx-lazy-images/ngx-lazy-images.component.ts","ng://ngx-lazy-loading-images/lib/ngx-lazy-loading-images.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxLazyImagesService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  ViewChild,\n  Input,\n  AfterViewInit,\n  ElementRef, OnInit\n} from '@angular/core';\n\n/**\n * The Intersection Observer API provides a way to asynchronously observe changes in the\n * intersection of a target element with an ancestor element or with a top-level documentâs\n * viewport. -MDN\n *\n *\n * The actual detection implementation doesnât run on the main thread. However, the callback for\n * when an intersection has been triggered does run on the main thread so keep it light!\n *\n * The rootMargin option takes in a string that conforms to the regular CSS margin rule.\n * Here we are telling to increase the bottom dectin boundry by 200px. Meaning the\n * intersection callback will be triggered once the user arrivers at the bottom of the root\n * element +200px (default is 0).\n * */\n\n@Component({\n  selector: 'ngx-lazy-images',\n  templateUrl: './ngx-lazy-images.component.html',\n  styleUrls: []\n})\nexport class NgxLazyImagesComponent implements AfterViewInit, OnInit {\n  @ViewChild('lazyImage') lazyImageEl: ElementRef;\n\n  // Image Meta Data\n  @Input() height: number;\n  @Input() width: number;\n\n  @Input() src: string;\n  @Input() alt = 'Lazy Loaded Image';\n  @Input() placeholder: string;\n\n  defaultConfig = {\n    rootMargin: '0px 0px',\n  };\n\n  @Input() config: IntersectionObserverInit = this.defaultConfig;\n\n  observer: IntersectionObserver;\n  isImgLoaded: boolean;\n\n  defaultPlaceholder: any;\n\n  visibilityHidden = { visibility: 'hidden' };\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.initPlaceholder();\n    this.height = this.height || 0;\n    this.width = this.width || 0;\n  }\n\n  ngAfterViewInit() {\n    this.observer = this.initIntersectionObserver();\n    this.observer.observe(this.lazyImageEl.nativeElement);\n  }\n\n  initIntersectionObserver(): IntersectionObserver {\n    return new IntersectionObserver(\n      entries => {\n        this.onIntersection(entries);\n      },\n      {\n        ...this.config,\n      }\n    );\n  }\n\n  // Callback is executed on the main thread, it should operate as quickly as possible.\n  onIntersection(entries: IntersectionObserverEntry[], observer?: any) {\n    entries.forEach(entry => {\n      this.imageLoader(entry);\n    });\n  }\n\n  imageLoader(entry: IntersectionObserverEntry) {\n    const { isIntersecting, target } = entry;\n\n    try {\n      const image = new Image();\n\n      if (!this.src) {\n        console.error('Lazy image element returned empty image source', target);\n        return;\n      }\n\n      if (isIntersecting) {\n        this.fetchImageMeta(image, this.src)\n          .then(() => {\n            this.height = this.height || image.height;\n            this.width = this.width || image.width;\n            this.lazyImageEl.nativeElement.src = image.src;\n            this.isImgLoaded = true;\n            this.observer.disconnect();\n          })\n          .catch((err) => {\n            console.error(`Fetching image meta data failed with ${target}`, err);\n          });\n      }\n    } catch (exception) {\n      console.error(`Image loader failed with ${target}`, exception);\n    }\n  }\n\n  fetchImageMeta(image: HTMLImageElement, src: string): Promise<any> {\n    return new Promise((resolve, error) => {\n      image.src = src;\n      image.onload = resolve; // eslint-disable-line no-param-reassign\n      image.onerror = error; // eslint-disable-line no-param-reassign\n    });\n  }\n\n  initPlaceholder() {\n    this.defaultPlaceholder = {\n      'position': 'relative',\n      'width': '100%',\n      'height': '100%',\n      'background-color': '#3A6073',\n      'background': this.placeholder ? this.placeholder : 'linear-gradient(to right, #3A6073, #16222A)',\n      /* blur filters */\n      '-webkit-filter': 'blur(5px)',\n      '-o-filter': 'blur(5px)',\n      'filter': 'blur(5px)',\n    };\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgxLazyImagesComponent } from './ngx-lazy-images/ngx-lazy-images.component';\n\n@NgModule({\n  declarations: [NgxLazyImagesComponent],\n  imports: [\n    BrowserModule\n  ],\n  exports: [NgxLazyImagesComponent]\n})\nexport class NgxLazyImagesModule { }\n"],"names":[],"mappings":"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"}
