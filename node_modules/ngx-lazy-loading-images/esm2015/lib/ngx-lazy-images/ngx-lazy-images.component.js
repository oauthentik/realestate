/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, ElementRef } from '@angular/core';
/**
 * The Intersection Observer API provides a way to asynchronously observe changes in the
 * intersection of a target element with an ancestor element or with a top-level document’s
 * viewport. -MDN
 *
 *
 * The actual detection implementation doesn’t run on the main thread. However, the callback for
 * when an intersection has been triggered does run on the main thread so keep it light!
 *
 * The rootMargin option takes in a string that conforms to the regular CSS margin rule.
 * Here we are telling to increase the bottom dectin boundry by 200px. Meaning the
 * intersection callback will be triggered once the user arrivers at the bottom of the root
 * element +200px (default is 0).
 *
 */
export class NgxLazyImagesComponent {
    constructor() {
        this.alt = 'Lazy Loaded Image';
        this.defaultConfig = {
            rootMargin: '0px 0px',
        };
        this.config = this.defaultConfig;
        this.visibilityHidden = { visibility: 'hidden' };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initPlaceholder();
        this.height = this.height || 0;
        this.width = this.width || 0;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.observer = this.initIntersectionObserver();
        this.observer.observe(this.lazyImageEl.nativeElement);
    }
    /**
     * @return {?}
     */
    initIntersectionObserver() {
        return new IntersectionObserver((/**
         * @param {?} entries
         * @return {?}
         */
        entries => {
            this.onIntersection(entries);
        }), Object.assign({}, this.config));
    }
    // Callback is executed on the main thread, it should operate as quickly as possible.
    /**
     * @param {?} entries
     * @param {?=} observer
     * @return {?}
     */
    onIntersection(entries, observer) {
        entries.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => {
            this.imageLoader(entry);
        }));
    }
    /**
     * @param {?} entry
     * @return {?}
     */
    imageLoader(entry) {
        const { isIntersecting, target } = entry;
        try {
            /** @type {?} */
            const image = new Image();
            if (!this.src) {
                console.error('Lazy image element returned empty image source', target);
                return;
            }
            if (isIntersecting) {
                this.fetchImageMeta(image, this.src)
                    .then((/**
                 * @return {?}
                 */
                () => {
                    this.height = this.height || image.height;
                    this.width = this.width || image.width;
                    this.lazyImageEl.nativeElement.src = image.src;
                    this.isImgLoaded = true;
                    this.observer.disconnect();
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    console.error(`Fetching image meta data failed with ${target}`, err);
                }));
            }
        }
        catch (exception) {
            console.error(`Image loader failed with ${target}`, exception);
        }
    }
    /**
     * @param {?} image
     * @param {?} src
     * @return {?}
     */
    fetchImageMeta(image, src) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} error
         * @return {?}
         */
        (resolve, error) => {
            image.src = src;
            image.onload = resolve; // eslint-disable-line no-param-reassign
            image.onerror = error; // eslint-disable-line no-param-reassign
        }));
    }
    /**
     * @return {?}
     */
    initPlaceholder() {
        this.defaultPlaceholder = {
            'position': 'relative',
            'width': '100%',
            'height': '100%',
            'background-color': '#3A6073',
            'background': this.placeholder ? this.placeholder : 'linear-gradient(to right, #3A6073, #16222A)',
            /* blur filters */
            '-webkit-filter': 'blur(5px)',
            '-o-filter': 'blur(5px)',
            'filter': 'blur(5px)',
        };
    }
}
NgxLazyImagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-lazy-images',
                template: "<div>\n  <div [style.width]=\"width + 'px'\" [style.height]=\"height + 'px'\" [ngStyle]=\"isImgLoaded ? null : defaultPlaceholder\">\n    <img\n      #lazyImage\n      [alt]=\"alt\"\n      [height]=\"height\"\n      [width]=\"width\"\n      [ngStyle]=\"isImgLoaded ? null : visibilityHidden\"\n    />\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
NgxLazyImagesComponent.ctorParameters = () => [];
NgxLazyImagesComponent.propDecorators = {
    lazyImageEl: [{ type: ViewChild, args: ['lazyImage',] }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    src: [{ type: Input }],
    alt: [{ type: Input }],
    placeholder: [{ type: Input }],
    config: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxLazyImagesComponent.prototype.lazyImageEl;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.height;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.width;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.src;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.alt;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.placeholder;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.defaultConfig;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.config;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.observer;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.isImgLoaded;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.defaultPlaceholder;
    /** @type {?} */
    NgxLazyImagesComponent.prototype.visibilityHidden;
}
//# sourceMappingURL=data:application/json;base64,