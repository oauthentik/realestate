(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-lazy-loading-images', ['exports', '@angular/core', '@angular/platform-browser'], factory) :
    (factory((global['ngx-lazy-loading-images'] = {}),global.ng.core,global.ng.platformBrowser));
}(this, (function (exports,i0,platformBrowser) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxLazyImagesService = /** @class */ (function () {
        function NgxLazyImagesService() {
        }
        NgxLazyImagesService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgxLazyImagesService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxLazyImagesService.ngInjectableDef = i0.defineInjectable({ factory: function NgxLazyImagesService_Factory() { return new NgxLazyImagesService(); }, token: NgxLazyImagesService, providedIn: "root" });
        return NgxLazyImagesService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * The Intersection Observer API provides a way to asynchronously observe changes in the
     * intersection of a target element with an ancestor element or with a top-level document’s
     * viewport. -MDN
     *
     *
     * The actual detection implementation doesn’t run on the main thread. However, the callback for
     * when an intersection has been triggered does run on the main thread so keep it light!
     *
     * The rootMargin option takes in a string that conforms to the regular CSS margin rule.
     * Here we are telling to increase the bottom dectin boundry by 200px. Meaning the
     * intersection callback will be triggered once the user arrivers at the bottom of the root
     * element +200px (default is 0).
     *
     */
    var NgxLazyImagesComponent = /** @class */ (function () {
        function NgxLazyImagesComponent() {
            this.alt = 'Lazy Loaded Image';
            this.defaultConfig = {
                rootMargin: '0px 0px',
            };
            this.config = this.defaultConfig;
            this.visibilityHidden = { visibility: 'hidden' };
        }
        /**
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initPlaceholder();
                this.height = this.height || 0;
                this.width = this.width || 0;
            };
        /**
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.observer = this.initIntersectionObserver();
                this.observer.observe(this.lazyImageEl.nativeElement);
            };
        /**
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.initIntersectionObserver = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new IntersectionObserver(( /**
                 * @param {?} entries
                 * @return {?}
                 */function (entries) {
                    _this.onIntersection(entries);
                }), __assign({}, this.config));
            };
        // Callback is executed on the main thread, it should operate as quickly as possible.
        // Callback is executed on the main thread, it should operate as quickly as possible.
        /**
         * @param {?} entries
         * @param {?=} observer
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.onIntersection =
            // Callback is executed on the main thread, it should operate as quickly as possible.
            /**
             * @param {?} entries
             * @param {?=} observer
             * @return {?}
             */
            function (entries, observer) {
                var _this = this;
                entries.forEach(( /**
                 * @param {?} entry
                 * @return {?}
                 */function (entry) {
                    _this.imageLoader(entry);
                }));
            };
        /**
         * @param {?} entry
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.imageLoader = /**
         * @param {?} entry
         * @return {?}
         */
            function (entry) {
                var _this = this;
                var isIntersecting = entry.isIntersecting, target = entry.target;
                try {
                    /** @type {?} */
                    var image_1 = new Image();
                    if (!this.src) {
                        console.error('Lazy image element returned empty image source', target);
                        return;
                    }
                    if (isIntersecting) {
                        this.fetchImageMeta(image_1, this.src)
                            .then(( /**
                     * @return {?}
                     */function () {
                            _this.height = _this.height || image_1.height;
                            _this.width = _this.width || image_1.width;
                            _this.lazyImageEl.nativeElement.src = image_1.src;
                            _this.isImgLoaded = true;
                            _this.observer.disconnect();
                        }))
                            .catch(( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                            console.error("Fetching image meta data failed with " + target, err);
                        }));
                    }
                }
                catch (exception) {
                    console.error("Image loader failed with " + target, exception);
                }
            };
        /**
         * @param {?} image
         * @param {?} src
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.fetchImageMeta = /**
         * @param {?} image
         * @param {?} src
         * @return {?}
         */
            function (image, src) {
                return new Promise(( /**
                 * @param {?} resolve
                 * @param {?} error
                 * @return {?}
                 */function (resolve, error) {
                    image.src = src;
                    image.onload = resolve; // eslint-disable-line no-param-reassign
                    image.onerror = error; // eslint-disable-line no-param-reassign
                }));
            };
        /**
         * @return {?}
         */
        NgxLazyImagesComponent.prototype.initPlaceholder = /**
         * @return {?}
         */
            function () {
                this.defaultPlaceholder = {
                    'position': 'relative',
                    'width': '100%',
                    'height': '100%',
                    'background-color': '#3A6073',
                    'background': this.placeholder ? this.placeholder : 'linear-gradient(to right, #3A6073, #16222A)',
                    /* blur filters */
                    '-webkit-filter': 'blur(5px)',
                    '-o-filter': 'blur(5px)',
                    'filter': 'blur(5px)',
                };
            };
        NgxLazyImagesComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ngx-lazy-images',
                        template: "<div>\n  <div [style.width]=\"width + 'px'\" [style.height]=\"height + 'px'\" [ngStyle]=\"isImgLoaded ? null : defaultPlaceholder\">\n    <img\n      #lazyImage\n      [alt]=\"alt\"\n      [height]=\"height\"\n      [width]=\"width\"\n      [ngStyle]=\"isImgLoaded ? null : visibilityHidden\"\n    />\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        NgxLazyImagesComponent.ctorParameters = function () { return []; };
        NgxLazyImagesComponent.propDecorators = {
            lazyImageEl: [{ type: i0.ViewChild, args: ['lazyImage',] }],
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            src: [{ type: i0.Input }],
            alt: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            config: [{ type: i0.Input }]
        };
        return NgxLazyImagesComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxLazyImagesModule = /** @class */ (function () {
        function NgxLazyImagesModule() {
        }
        NgxLazyImagesModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NgxLazyImagesComponent],
                        imports: [
                            platformBrowser.BrowserModule
                        ],
                        exports: [NgxLazyImagesComponent]
                    },] }
        ];
        return NgxLazyImagesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxLazyImagesService = NgxLazyImagesService;
    exports.NgxLazyImagesComponent = NgxLazyImagesComponent;
    exports.NgxLazyImagesModule = NgxLazyImagesModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-lazy-loading-images.umd.js.map