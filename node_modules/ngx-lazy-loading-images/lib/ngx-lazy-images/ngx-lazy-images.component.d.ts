import { AfterViewInit, ElementRef, OnInit } from '@angular/core';
/**
 * The Intersection Observer API provides a way to asynchronously observe changes in the
 * intersection of a target element with an ancestor element or with a top-level document’s
 * viewport. -MDN
 *
 *
 * The actual detection implementation doesn’t run on the main thread. However, the callback for
 * when an intersection has been triggered does run on the main thread so keep it light!
 *
 * The rootMargin option takes in a string that conforms to the regular CSS margin rule.
 * Here we are telling to increase the bottom dectin boundry by 200px. Meaning the
 * intersection callback will be triggered once the user arrivers at the bottom of the root
 * element +200px (default is 0).
 * */
export declare class NgxLazyImagesComponent implements AfterViewInit, OnInit {
    lazyImageEl: ElementRef;
    height: number;
    width: number;
    src: string;
    alt: string;
    placeholder: string;
    defaultConfig: {
        rootMargin: string;
    };
    config: IntersectionObserverInit;
    observer: IntersectionObserver;
    isImgLoaded: boolean;
    defaultPlaceholder: any;
    visibilityHidden: {
        visibility: string;
    };
    constructor();
    ngOnInit(): void;
    ngAfterViewInit(): void;
    initIntersectionObserver(): IntersectionObserver;
    onIntersection(entries: IntersectionObserverEntry[], observer?: any): void;
    imageLoader(entry: IntersectionObserverEntry): void;
    fetchImageMeta(image: HTMLImageElement, src: string): Promise<any>;
    initPlaceholder(): void;
}
